/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Copyright 2017, UT-Battelle, LLC
 *
 * SPDX-License-Identifier: BSD-3-Clause
 * License-Filename: LICENSE
 */


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
#ifdef __cplusplus
#define SWIGEXTERN extern
#else
#define SWIGEXTERN
#endif
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




// Default exception handler
#define SWIG_exception_impl(CODE, MSG, RETURNNULL) \
    throw std::logic_error(MSG); RETURNNULL;


/* Contract support */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
    if (!(EXPR)) { SWIG_exception_impl(SWIG_ValueError, MSG, RETURNNULL); }


#undef SWIG_exception_impl
#define SWIG_exception_impl(CODE, MSG, RETURNNULL) \
    swigf_store_exception(CODE, MSG); RETURNNULL;


void swigf_check_unhandled_exception();
void swigf_store_exception(int code, const char *msg);


#define SWIGF_check_nonnull(SWIGF_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    if ((SWIGF_CLASS_WRAPPER).mem == SWIGF_NULL) { \
        SWIG_exception_impl(SWIG_TypeError, \
            "Cannot pass null " TYPENAME " (class " FNAME ") " \
            "to function (" FUNCNAME ")", RETURNNULL); \
    }


#define SWIGF_check_mutable(SWIGF_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    if ((SWIGF_CLASS_WRAPPER).mem == SWIGF_CREF) { \
        SWIG_exception_impl(SWIG_TypeError, \
            "Cannot pass const " TYPENAME " (class " FNAME ") " \
            "to a function (" FUNCNAME ") that requires a mutable reference", \
            RETURNNULL); \
    }


#define SWIGF_check_mutable_nonnull(SWIGF_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    SWIGF_check_nonnull(SWIGF_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL); \
    SWIGF_check_mutable(SWIGF_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL);



#if __cplusplus >= 201103L
#define SWIGF_assign(LEFTTYPE, LEFT, RIGHTTYPE, RIGHT, FLAGS) \
    SwigfAssign<LEFTTYPE , RIGHTTYPE, swigf::assignment_flags<LEFTTYPE >() >( \
            LEFT, RIGHT);
#else
#define SWIGF_assign(LEFTTYPE, LEFT, RIGHTTYPE, RIGHT, FLAGS) \
    SwigfAssign<LEFTTYPE , RIGHTTYPE, FLAGS >(LEFT, RIGHT);
#endif



#define SWIGF_check_sp_nonnull(INPUT, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    if (!(INPUT)) { \
        SWIG_exception_impl(SWIG_TypeError, \
            "Cannot pass null " TYPENAME " (class " FNAME ") " \
            "to function (" FUNCNAME ")", RETURNNULL); \
    }


#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


// DEPRECATED: use swigf_check_unhandled_exception instead
namespace swig
{
#ifdef __GNUC__
__attribute__((deprecated))
#endif
inline void fortran_check_unhandled_exception()
{
    swigf_check_unhandled_exception();
}
} // end namespace swig


#include <vector>



enum SwigfMemState {
    SWIGF_NULL = 0,
    SWIGF_OWN,
    SWIGF_MOVE,
    SWIGF_REF,
    SWIGF_CREF
};

const char* const swigf_mem_state_strings[]
  = {"NULL", "OWN", "MOVE", "REF", "CREF"};



struct SwigfClassWrapper
{
    void* ptr;
    SwigfMemState mem;
};

SwigfClassWrapper SwigfClassWrapper_uninitialized()
{
    SwigfClassWrapper result;
    result.ptr = NULL;
    result.mem = SWIGF_NULL;
    return result;
}

SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,std::vector< int >::size_type index,std::vector< int >::const_reference v){
        // TODO: check range
        (*self)[index] = v;
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__get(std::vector< int > *self,std::vector< int >::size_type index){
        // TODO: check range
        return (*self)[index];
    }

#include <utility>


namespace swigf {

enum AssignmentFlags {
  IS_DESTR       = 0x01,
  IS_COPY_CONSTR = 0x02,
  IS_COPY_ASSIGN = 0x04,
  IS_MOVE_CONSTR = 0x08,
  IS_MOVE_ASSIGN = 0x10
};

// Define our own switching struct to support pre-c++11 builds
template<bool Val>
struct bool_constant {};
typedef bool_constant<true>  true_type;
typedef bool_constant<false> false_type;

// Deletion
template<class T>
void destruct_impl(T* self, true_type) {
  delete self;
}
template<class T>
T* destruct_impl(T* , false_type) {
  SWIG_exception_impl(SWIG_TypeError,
                      "Invalid assignment: class type has no destructor",
                      return NULL);
}

// Copy construction and assignment
template<class T, class U>
T* copy_construct_impl(const U* other, true_type) {
  return new T(*other);
}
template<class T, class U>
void copy_assign_impl(T* self, const U* other, true_type) {
  *self = *other;
}

// Disabled construction and assignment
template<class T, class U>
T* copy_construct_impl(const U* , false_type) {
  SWIG_exception_impl(SWIG_TypeError,
                      "Invalid assignment: class type has no copy constructor",
                      return NULL);
}
template<class T, class U>
void copy_assign_impl(T* , const U* , false_type) {
  SWIG_exception_impl(SWIG_TypeError,
                      "Invalid assignment: class type has no copy assignment",
                      return);
}

#if __cplusplus >= 201103L
#include <utility>
#include <type_traits>

// Move construction and assignment
template<class T, class U>
T* move_construct_impl(U* other, true_type) {
  return new T(std::move(*other));
}
template<class T, class U>
void move_assign_impl(T* self, U* other, true_type) {
  *self = std::move(*other);
}

// Disabled move construction and assignment
template<class T, class U>
T* move_construct_impl(U*, false_type) {
  SWIG_exception_impl(SWIG_TypeError,
                      "Invalid assignment: class type has no move constructor",
                      return NULL);
}
template<class T, class U>
void move_assign_impl(T*, U*, false_type) {
  SWIG_exception_impl(SWIG_TypeError,
                      "Invalid assignment: class type has no move assignment",
                      return);
}

template<class T>
constexpr int assignment_flags() {
  return   (std::is_destructible<T>::value       ? IS_DESTR       : 0)
         | (std::is_copy_constructible<T>::value ? IS_COPY_CONSTR : 0)
         | (std::is_copy_assignable<T>::value    ? IS_COPY_ASSIGN : 0)
         | (std::is_move_constructible<T>::value ? IS_MOVE_CONSTR : 0)
         | (std::is_move_assignable<T>::value    ? IS_MOVE_ASSIGN : 0);
}
#endif

template<class T, int Flags>
struct AssignmentTraits
{
  static void destruct(T* self)
  {
    destruct_impl<T>(self, bool_constant<Flags & IS_DESTR>());
  }

  template<class U>
  static T* copy_construct(const U* other)
  {
    return copy_construct_impl<T,U>(other, bool_constant<bool(Flags & IS_COPY_CONSTR)>());
  }

  template<class U>
  static void copy_assign(T* self, const U* other)
  {
    copy_assign_impl<T,U>(self, other, bool_constant<bool(Flags & IS_COPY_ASSIGN)>());
  }

#if __cplusplus >= 201103L
  template<class U>
  static T* move_construct(U* other)
  {
    return move_construct_impl<T,U>(other, bool_constant<bool(Flags & IS_MOVE_CONSTR)>());
  }
  template<class U>
  static void move_assign(T* self, U* other)
  {
    move_assign_impl<T,U>(self, other, bool_constant<bool(Flags & IS_MOVE_ASSIGN)>());
  }
#else
  template<class U>
  static T* move_construct(U* other)
  {
    return copy_construct_impl<T,U>(other, bool_constant<bool(Flags & IS_COPY_CONSTR)>());
  }
  template<class U>
  static void move_assign(T* self, U* other)
  {
    copy_assign_impl<T,U>(self, other, bool_constant<bool(Flags & IS_COPY_ASSIGN)>());
  }
#endif
};

} // end namespace swigf



template<class T1, class T2, int AFlags>
void SwigfAssign(SwigfClassWrapper* self, SwigfClassWrapper* other) {
  typedef swigf::AssignmentTraits<T1, AFlags> Traits_t;
  T1* pself  = static_cast<T1*>(self->ptr);
  T2* pother = static_cast<T2*>(other->ptr);

  switch (self->mem) {
    case SWIGF_NULL:
      /* LHS is unassigned */
      switch (other->mem) {
        case SWIGF_NULL: /* null op */ break;
        case SWIGF_MOVE: /* capture pointer from RHS */
          self->ptr = other->ptr;
          other->ptr = NULL;
          self->mem = SWIGF_OWN;
          other->mem = SWIGF_NULL;
          break;
        case SWIGF_OWN: /* copy from RHS */
          self->ptr = Traits_t::copy_construct(pother);
          self->mem = SWIGF_OWN;
          break;
        case SWIGF_REF: /* pointer to RHS */
        case SWIGF_CREF:
          self->ptr = other->ptr;
          self->mem = other->mem;
          break;
      }
      break;
    case SWIGF_OWN:
      /* LHS owns memory */
      switch (other->mem) {
        case SWIGF_NULL:
          /* Delete LHS */
          Traits_t::destruct(pself);
          self->ptr = NULL;
          self->mem = SWIGF_NULL;
          break;
        case SWIGF_MOVE:
          /* Move RHS into LHS; delete RHS */
          Traits_t::move_assign(pself, pother);
          Traits_t::destruct(pother);
          other->ptr = NULL;
          other->mem = SWIGF_NULL;
          break;
        case SWIGF_OWN:
        case SWIGF_REF:
        case SWIGF_CREF:
          /* Copy RHS to LHS */
          Traits_t::copy_assign(pself, pother);
          break;
      }
      break;
    case SWIGF_MOVE:
      SWIG_exception_impl(SWIG_RuntimeError,
        "Left-hand side of assignment should never be in a 'MOVE' state",
        return);
      break;
    case SWIGF_REF:
      /* LHS is a reference */
      switch (other->mem) {
        case SWIGF_NULL:
          /* Remove LHS reference */
          self->ptr = NULL;
          self->mem = SWIGF_NULL;
          break;
        case SWIGF_MOVE:
          /* Move RHS into LHS; delete RHS. The original ownership stays the
           * same. */
          Traits_t::move_assign(pself, pother);
          Traits_t::destruct(pother);
          other->ptr = NULL;
          other->mem = SWIGF_NULL;
          break;
        case SWIGF_OWN:
        case SWIGF_REF:
        case SWIGF_CREF:
          /* Copy RHS to LHS */
          Traits_t::copy_assign(pself, pother);
          break;
      }
    case SWIGF_CREF:
      switch (other->mem) {
        case SWIGF_NULL:
          /* Remove LHS reference */
          self->ptr = NULL;
          self->mem = SWIGF_NULL;
        default:
          SWIG_exception_impl(SWIG_RuntimeError,
              "Cannot assign to a const reference", return);
          break;
      }
  }
}

SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,std::vector< double >::size_type index,std::vector< double >::const_reference v){
        // TODO: check range
        (*self)[index] = v;
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__get(std::vector< double > *self,std::vector< double >::size_type index){
        // TODO: check range
        return (*self)[index];
    }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__set(std::vector< long long > *self,std::vector< long long >::size_type index,std::vector< long long >::const_reference v){
        // TODO: check range
        (*self)[index] = v;
    }
SWIGINTERN std::vector< long long >::value_type std_vector_Sl_long_SS_long_Sg__get(std::vector< long long > *self,std::vector< long long >::size_type index){
        // TODO: check range
        return (*self)[index];
    }

#include <string>


#include "Teuchos_BLAS_types.hpp"
#include "Teuchos_DataAccess.hpp"


#include "Teuchos_Exceptions.hpp"


#include "Teuchos_RCP.hpp"


#include "Teuchos_Comm.hpp"
#ifdef HAVE_MPI
# include "Teuchos_DefaultMpiComm.hpp"
#else
  typedef int MPI_Comm;
#endif
#include "Teuchos_DefaultSerialComm.hpp"

SWIGINTERN Teuchos::Comm< int > *new_Teuchos_Comm_Sl_int_Sg___SWIG_0(MPI_Comm rawMpiComm){
#ifdef HAVE_MPI
      return static_cast<Teuchos::Comm<int>*>(new Teuchos::MpiComm<int>(rawMpiComm));
#else
      throw std::runtime_error("MPI based constructor cannot be called when MPI is not enabled.");
#endif
    }

#define SWIG_NO_NULL_DELETER_0 , Teuchos::RCP_WEAK_NO_DEALLOC
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN Teuchos::Comm< int > *new_Teuchos_Comm_Sl_int_Sg___SWIG_1(){
#ifdef HAVE_MPI
      return static_cast<Teuchos::Comm<int>*>(new Teuchos::MpiComm<int>(MPI_COMM_WORLD));
#else
      return static_cast<Teuchos::Comm<int>*>(new Teuchos::SerialComm<int>());
#endif
    }
SWIGINTERN int Teuchos_Comm_Sl_int_Sg__getRank(Teuchos::Comm< int > const *self){
      return self->getRank();
    }
SWIGINTERN int Teuchos_Comm_Sl_int_Sg__getSize(Teuchos::Comm< int > const *self){
      return self->getSize();
    }
SWIGINTERN void Teuchos_Comm_Sl_int_Sg__barrier(Teuchos::Comm< int > const *self){
      self->barrier();
    }

#include "Teuchos_Array.hpp"


#include "Teuchos_ParameterList.hpp"


struct SwigfArrayWrapper
{
    void* data;
    std::size_t size;
};

SwigfArrayWrapper SwigfArrayWrapper_uninitialized()
{
    SwigfArrayWrapper result;
    result.data = NULL;
    result.size = 0;
    return result;
}


#include "Teuchos_XMLParameterListCoreHelpers.hpp"


void load_from_xml(const Teuchos::RCP<Teuchos::ParameterList>& plist,
                   const std::string& xml_path)
{
    Teuchos::updateParametersFromXmlFile(xml_path, Teuchos::inOutArg(*plist));
}

void save_to_xml(const Teuchos::ParameterList& plist,
                 const std::string& xml_path)
{
    Teuchos::writeParameterListToXmlFile(plist, xml_path);
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT SwigfClassWrapper swigc_new_VectorInt__SWIG_0() {
  SwigfClassWrapper fresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  fresult.ptr = result;
  fresult.mem = (1 ? SWIGF_MOVE : SWIGF_REF);
  return fresult;
}


SWIGEXPORT SwigfClassWrapper swigc_new_VectorInt__SWIG_1(int const *farg1) {
  SwigfClassWrapper fresult ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = *farg1;
  result = (std::vector< int > *)new std::vector< int >(arg1);
  fresult.ptr = result;
  fresult.mem = (1 ? SWIGF_MOVE : SWIGF_REF);
  return fresult;
}


SWIGEXPORT SwigfClassWrapper swigc_new_VectorInt__SWIG_2(int const *farg1, int const *farg2) {
  SwigfClassWrapper fresult ;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = reinterpret_cast< std::vector< int >::value_type * >(const_cast< int* >(farg2));
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  fresult.ptr = result;
  fresult.mem = (1 ? SWIGF_MOVE : SWIGF_REF);
  return fresult;
}


SWIGEXPORT int swigc_VectorInt_size(SwigfClassWrapper const *farg1) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  SWIGF_check_nonnull(*farg1, "std::vector< int > const *", "VectorInt", "std::vector< int >::size() const", return 0);
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  result = (std::vector< int >::size_type)((std::vector< int > const *)arg1)->size();
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_VectorInt_capacity(SwigfClassWrapper const *farg1) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  SWIGF_check_nonnull(*farg1, "std::vector< int > const *", "VectorInt", "std::vector< int >::capacity() const", return 0);
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  result = (std::vector< int >::size_type)((std::vector< int > const *)arg1)->capacity();
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_VectorInt_empty(SwigfClassWrapper const *farg1) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  SWIGF_check_nonnull(*farg1, "std::vector< int > const *", "VectorInt", "std::vector< int >::empty() const", return 0);
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  result = (bool)((std::vector< int > const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void swigc_VectorInt_clear(SwigfClassWrapper const *farg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< int > *", "VectorInt", "std::vector< int >::clear()", return );
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  (arg1)->clear();
  
}


SWIGEXPORT void swigc_VectorInt_reserve(SwigfClassWrapper const *farg1, int const *farg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< int > *", "VectorInt", "std::vector< int >::reserve(std::vector< int >::size_type)", return );
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  arg2 = *farg2;
  (arg1)->reserve(arg2);
  
}


SWIGEXPORT void swigc_VectorInt_resize__SWIG_0(SwigfClassWrapper const *farg1, int const *farg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< int > *", "VectorInt", "std::vector< int >::resize(std::vector< int >::size_type)", return );
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  arg2 = *farg2;
  (arg1)->resize(arg2);
  
}


SWIGEXPORT void swigc_VectorInt_resize__SWIG_1(SwigfClassWrapper const *farg1, int const *farg2, int const *farg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< int > *", "VectorInt", "std::vector< int >::resize(std::vector< int >::size_type,std::vector< int >::value_type const &)", return );
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  arg2 = *farg2;
  arg3 = reinterpret_cast< std::vector< int >::value_type * >(const_cast< int* >(farg3));
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  
}


SWIGEXPORT void swigc_VectorInt_push_back(SwigfClassWrapper const *farg1, int const *farg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< int > *", "VectorInt", "std::vector< int >::push_back(std::vector< int >::value_type const &)", return );
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  arg2 = reinterpret_cast< std::vector< int >::value_type * >(const_cast< int* >(farg2));
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  
}


SWIGEXPORT int swigc_VectorInt_front(SwigfClassWrapper const *farg1) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  SWIGF_check_nonnull(*farg1, "std::vector< int > const *", "VectorInt", "std::vector< int >::front() const", return 0);
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  result = (int *) &((std::vector< int > const *)arg1)->front();
  fresult = *result;
  return fresult;
}


SWIGEXPORT int swigc_VectorInt_back(SwigfClassWrapper const *farg1) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  SWIGF_check_nonnull(*farg1, "std::vector< int > const *", "VectorInt", "std::vector< int >::back() const", return 0);
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  result = (int *) &((std::vector< int > const *)arg1)->back();
  fresult = *result;
  return fresult;
}


SWIGEXPORT void swigc_VectorInt_set(SwigfClassWrapper const *farg1, int const *farg2, int const *farg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  int *arg3 = 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< int > *", "VectorInt", "std::vector< int >::set(std::vector< int >::size_type,std::vector< int >::const_reference)", return );
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  arg2 = *farg2;
  arg3 = reinterpret_cast< int * >(const_cast< int* >(farg3));
  std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  
}


SWIGEXPORT int swigc_VectorInt_get(SwigfClassWrapper const *farg1, int const *farg2) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type result;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< int > *", "VectorInt", "std::vector< int >::get(std::vector< int >::size_type)", return 0);
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  arg2 = *farg2;
  result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__get(arg1,arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_VectorInt(SwigfClassWrapper const *farg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< int > *", "VectorInt", "std::vector< int >::~vector()", return );
  arg1 = static_cast< std::vector< int > * >(farg1->ptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_assignment_VectorInt(SwigfClassWrapper * self, SwigfClassWrapper const * other) {
  typedef std::vector< int > swigf_lhs_classtype;
  SWIGF_assign(swigf_lhs_classtype, self,
    swigf_lhs_classtype, const_cast<SwigfClassWrapper*>(other),
    0 | swigf::IS_COPY_CONSTR);
}


SWIGEXPORT SwigfClassWrapper swigc_new_VectorDouble__SWIG_0() {
  SwigfClassWrapper fresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  fresult.ptr = result;
  fresult.mem = (1 ? SWIGF_MOVE : SWIGF_REF);
  return fresult;
}


SWIGEXPORT SwigfClassWrapper swigc_new_VectorDouble__SWIG_1(int const *farg1) {
  SwigfClassWrapper fresult ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = *farg1;
  result = (std::vector< double > *)new std::vector< double >(arg1);
  fresult.ptr = result;
  fresult.mem = (1 ? SWIGF_MOVE : SWIGF_REF);
  return fresult;
}


SWIGEXPORT SwigfClassWrapper swigc_new_VectorDouble__SWIG_2(int const *farg1, double const *farg2) {
  SwigfClassWrapper fresult ;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = reinterpret_cast< std::vector< double >::value_type * >(const_cast< double* >(farg2));
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  fresult.ptr = result;
  fresult.mem = (1 ? SWIGF_MOVE : SWIGF_REF);
  return fresult;
}


SWIGEXPORT int swigc_VectorDouble_size(SwigfClassWrapper const *farg1) {
  int fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  SWIGF_check_nonnull(*farg1, "std::vector< double > const *", "VectorDouble", "std::vector< double >::size() const", return 0);
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  result = (std::vector< double >::size_type)((std::vector< double > const *)arg1)->size();
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_VectorDouble_capacity(SwigfClassWrapper const *farg1) {
  int fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  SWIGF_check_nonnull(*farg1, "std::vector< double > const *", "VectorDouble", "std::vector< double >::capacity() const", return 0);
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  result = (std::vector< double >::size_type)((std::vector< double > const *)arg1)->capacity();
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_VectorDouble_empty(SwigfClassWrapper const *farg1) {
  int fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  SWIGF_check_nonnull(*farg1, "std::vector< double > const *", "VectorDouble", "std::vector< double >::empty() const", return 0);
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void swigc_VectorDouble_clear(SwigfClassWrapper const *farg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< double > *", "VectorDouble", "std::vector< double >::clear()", return );
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  (arg1)->clear();
  
}


SWIGEXPORT void swigc_VectorDouble_reserve(SwigfClassWrapper const *farg1, int const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< double > *", "VectorDouble", "std::vector< double >::reserve(std::vector< double >::size_type)", return );
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  arg2 = *farg2;
  (arg1)->reserve(arg2);
  
}


SWIGEXPORT void swigc_VectorDouble_resize__SWIG_0(SwigfClassWrapper const *farg1, int const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< double > *", "VectorDouble", "std::vector< double >::resize(std::vector< double >::size_type)", return );
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  arg2 = *farg2;
  (arg1)->resize(arg2);
  
}


SWIGEXPORT void swigc_VectorDouble_resize__SWIG_1(SwigfClassWrapper const *farg1, int const *farg2, double const *farg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< double > *", "VectorDouble", "std::vector< double >::resize(std::vector< double >::size_type,std::vector< double >::value_type const &)", return );
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  arg2 = *farg2;
  arg3 = reinterpret_cast< std::vector< double >::value_type * >(const_cast< double* >(farg3));
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  
}


SWIGEXPORT void swigc_VectorDouble_push_back(SwigfClassWrapper const *farg1, double const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< double > *", "VectorDouble", "std::vector< double >::push_back(std::vector< double >::value_type const &)", return );
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  arg2 = reinterpret_cast< std::vector< double >::value_type * >(const_cast< double* >(farg2));
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  
}


SWIGEXPORT double swigc_VectorDouble_front(SwigfClassWrapper const *farg1) {
  double fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIGF_check_nonnull(*farg1, "std::vector< double > const *", "VectorDouble", "std::vector< double >::front() const", return 0);
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  result = (double *) &((std::vector< double > const *)arg1)->front();
  fresult = *result;
  return fresult;
}


SWIGEXPORT double swigc_VectorDouble_back(SwigfClassWrapper const *farg1) {
  double fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  SWIGF_check_nonnull(*farg1, "std::vector< double > const *", "VectorDouble", "std::vector< double >::back() const", return 0);
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  result = (double *) &((std::vector< double > const *)arg1)->back();
  fresult = *result;
  return fresult;
}


SWIGEXPORT void swigc_VectorDouble_set(SwigfClassWrapper const *farg1, int const *farg2, double const *farg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  double *arg3 = 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< double > *", "VectorDouble", "std::vector< double >::set(std::vector< double >::size_type,std::vector< double >::const_reference)", return );
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  arg2 = *farg2;
  arg3 = reinterpret_cast< double * >(const_cast< double* >(farg3));
  std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  
}


SWIGEXPORT double swigc_VectorDouble_get(SwigfClassWrapper const *farg1, int const *farg2) {
  double fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type result;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< double > *", "VectorDouble", "std::vector< double >::get(std::vector< double >::size_type)", return 0);
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  arg2 = *farg2;
  result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__get(arg1,arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_VectorDouble(SwigfClassWrapper const *farg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< double > *", "VectorDouble", "std::vector< double >::~vector()", return );
  arg1 = static_cast< std::vector< double > * >(farg1->ptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_assignment_VectorDouble(SwigfClassWrapper * self, SwigfClassWrapper const * other) {
  typedef std::vector< double > swigf_lhs_classtype;
  SWIGF_assign(swigf_lhs_classtype, self,
    swigf_lhs_classtype, const_cast<SwigfClassWrapper*>(other),
    0 | swigf::IS_COPY_CONSTR);
}


SWIGEXPORT SwigfClassWrapper swigc_new_VectorLongLong__SWIG_0() {
  SwigfClassWrapper fresult ;
  std::vector< long long > *result = 0 ;
  
  result = (std::vector< long long > *)new std::vector< long long >();
  fresult.ptr = result;
  fresult.mem = (1 ? SWIGF_MOVE : SWIGF_REF);
  return fresult;
}


SWIGEXPORT SwigfClassWrapper swigc_new_VectorLongLong__SWIG_1(int const *farg1) {
  SwigfClassWrapper fresult ;
  std::vector< long long >::size_type arg1 ;
  std::vector< long long > *result = 0 ;
  
  arg1 = *farg1;
  result = (std::vector< long long > *)new std::vector< long long >(arg1);
  fresult.ptr = result;
  fresult.mem = (1 ? SWIGF_MOVE : SWIGF_REF);
  return fresult;
}


SWIGEXPORT SwigfClassWrapper swigc_new_VectorLongLong__SWIG_2(int const *farg1, long long const *farg2) {
  SwigfClassWrapper fresult ;
  std::vector< long long >::size_type arg1 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  std::vector< long long > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = reinterpret_cast< std::vector< long long >::value_type * >(const_cast< long long* >(farg2));
  result = (std::vector< long long > *)new std::vector< long long >(arg1,(std::vector< long long >::value_type const &)*arg2);
  fresult.ptr = result;
  fresult.mem = (1 ? SWIGF_MOVE : SWIGF_REF);
  return fresult;
}


SWIGEXPORT int swigc_VectorLongLong_size(SwigfClassWrapper const *farg1) {
  int fresult ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  SWIGF_check_nonnull(*farg1, "std::vector< long long > const *", "VectorLongLong", "std::vector< long long >::size() const", return 0);
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  result = (std::vector< long long >::size_type)((std::vector< long long > const *)arg1)->size();
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_VectorLongLong_capacity(SwigfClassWrapper const *farg1) {
  int fresult ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  SWIGF_check_nonnull(*farg1, "std::vector< long long > const *", "VectorLongLong", "std::vector< long long >::capacity() const", return 0);
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  result = (std::vector< long long >::size_type)((std::vector< long long > const *)arg1)->capacity();
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_VectorLongLong_empty(SwigfClassWrapper const *farg1) {
  int fresult ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  bool result;
  
  SWIGF_check_nonnull(*farg1, "std::vector< long long > const *", "VectorLongLong", "std::vector< long long >::empty() const", return 0);
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  result = (bool)((std::vector< long long > const *)arg1)->empty();
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void swigc_VectorLongLong_clear(SwigfClassWrapper const *farg1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< long long > *", "VectorLongLong", "std::vector< long long >::clear()", return );
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  (arg1)->clear();
  
}


SWIGEXPORT void swigc_VectorLongLong_reserve(SwigfClassWrapper const *farg1, int const *farg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< long long > *", "VectorLongLong", "std::vector< long long >::reserve(std::vector< long long >::size_type)", return );
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  arg2 = *farg2;
  (arg1)->reserve(arg2);
  
}


SWIGEXPORT void swigc_VectorLongLong_resize__SWIG_0(SwigfClassWrapper const *farg1, int const *farg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< long long > *", "VectorLongLong", "std::vector< long long >::resize(std::vector< long long >::size_type)", return );
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  arg2 = *farg2;
  (arg1)->resize(arg2);
  
}


SWIGEXPORT void swigc_VectorLongLong_resize__SWIG_1(SwigfClassWrapper const *farg1, int const *farg2, long long const *farg3) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< long long > *", "VectorLongLong", "std::vector< long long >::resize(std::vector< long long >::size_type,std::vector< long long >::value_type const &)", return );
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  arg2 = *farg2;
  arg3 = reinterpret_cast< std::vector< long long >::value_type * >(const_cast< long long* >(farg3));
  (arg1)->resize(arg2,(std::vector< long long >::value_type const &)*arg3);
  
}


SWIGEXPORT void swigc_VectorLongLong_push_back(SwigfClassWrapper const *farg1, long long const *farg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< long long > *", "VectorLongLong", "std::vector< long long >::push_back(std::vector< long long >::value_type const &)", return );
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  arg2 = reinterpret_cast< std::vector< long long >::value_type * >(const_cast< long long* >(farg2));
  (arg1)->push_back((std::vector< long long >::value_type const &)*arg2);
  
}


SWIGEXPORT long long swigc_VectorLongLong_front(SwigfClassWrapper const *farg1) {
  long long fresult ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIGF_check_nonnull(*farg1, "std::vector< long long > const *", "VectorLongLong", "std::vector< long long >::front() const", return 0);
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  result = (long long *) &((std::vector< long long > const *)arg1)->front();
  fresult = *result;
  return fresult;
}


SWIGEXPORT long long swigc_VectorLongLong_back(SwigfClassWrapper const *farg1) {
  long long fresult ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  long long *result = 0 ;
  
  SWIGF_check_nonnull(*farg1, "std::vector< long long > const *", "VectorLongLong", "std::vector< long long >::back() const", return 0);
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  result = (long long *) &((std::vector< long long > const *)arg1)->back();
  fresult = *result;
  return fresult;
}


SWIGEXPORT void swigc_VectorLongLong_set(SwigfClassWrapper const *farg1, int const *farg2, long long const *farg3) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  long long *arg3 = 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< long long > *", "VectorLongLong", "std::vector< long long >::set(std::vector< long long >::size_type,std::vector< long long >::const_reference)", return );
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  arg2 = *farg2;
  arg3 = reinterpret_cast< long long * >(const_cast< long long* >(farg3));
  std_vector_Sl_long_SS_long_Sg__set(arg1,arg2,(long long const &)*arg3);
  
}


SWIGEXPORT long long swigc_VectorLongLong_get(SwigfClassWrapper const *farg1, int const *farg2) {
  long long fresult ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  std::vector< long long >::value_type result;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< long long > *", "VectorLongLong", "std::vector< long long >::get(std::vector< long long >::size_type)", return 0);
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  arg2 = *farg2;
  result = (std::vector< long long >::value_type)std_vector_Sl_long_SS_long_Sg__get(arg1,arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_VectorLongLong(SwigfClassWrapper const *farg1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  SWIGF_check_mutable_nonnull(*farg1, "std::vector< long long > *", "VectorLongLong", "std::vector< long long >::~vector()", return );
  arg1 = static_cast< std::vector< long long > * >(farg1->ptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_assignment_VectorLongLong(SwigfClassWrapper * self, SwigfClassWrapper const * other) {
  typedef std::vector< long long > swigf_lhs_classtype;
  SWIGF_assign(swigf_lhs_classtype, self,
    swigf_lhs_classtype, const_cast<SwigfClassWrapper*>(other),
    0 | swigf::IS_COPY_CONSTR);
}


SWIGEXPORT SwigfClassWrapper swigc_new_TeuchosComm__SWIG_0(int const *farg1) {
  SwigfClassWrapper fresult ;
  MPI_Comm arg1 ;
  Teuchos::Comm< int > *result = 0 ;
  
  
#ifdef HAVE_MPI
  arg1 = (MPI_Comm)(MPI_Comm_f2c(*(MPI_Fint *)(farg1)));
#else
  arg1 = *farg1;
#endif
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Comm< int > *)new_Teuchos_Comm_Sl_int_Sg___SWIG_0(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return SwigfClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return SwigfClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return SwigfClassWrapper_uninitialized());
    }
  }
  fresult.ptr = result ? new Teuchos::RCP< Teuchos::Comm<int> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.mem = SWIGF_MOVE;
  return fresult;
}


SWIGEXPORT SwigfClassWrapper swigc_new_TeuchosComm__SWIG_1() {
  SwigfClassWrapper fresult ;
  Teuchos::Comm< int > *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Comm< int > *)new_Teuchos_Comm_Sl_int_Sg___SWIG_1();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return SwigfClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return SwigfClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return SwigfClassWrapper_uninitialized());
    }
  }
  fresult.ptr = result ? new Teuchos::RCP< Teuchos::Comm<int> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.mem = SWIGF_MOVE;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosComm_getRank(SwigfClassWrapper const *farg1) {
  int fresult ;
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *smartarg1 ;
  int result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Teuchos::Comm<int> >* >(farg1->ptr);
  arg1 = smartarg1 ? const_cast<Teuchos::Comm<int>*>(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)Teuchos_Comm_Sl_int_Sg__getRank((Teuchos::Comm< int > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosComm_getSize(SwigfClassWrapper const *farg1) {
  int fresult ;
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *smartarg1 ;
  int result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Teuchos::Comm<int> >* >(farg1->ptr);
  arg1 = smartarg1 ? const_cast<Teuchos::Comm<int>*>(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)Teuchos_Comm_Sl_int_Sg__getSize((Teuchos::Comm< int > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TeuchosComm_barrier(SwigfClassWrapper const *farg1) {
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Teuchos::Comm<int> >* >(farg1->ptr);
  arg1 = smartarg1 ? const_cast<Teuchos::Comm<int>*>(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_Comm_Sl_int_Sg__barrier((Teuchos::Comm< int > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_delete_TeuchosComm(SwigfClassWrapper const *farg1) {
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::Comm<int> >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_assignment_TeuchosComm(SwigfClassWrapper * self, SwigfClassWrapper const * other) {
  typedef Teuchos::RCP< Teuchos::Comm<int> > swigf_lhs_classtype;
  SWIGF_assign(swigf_lhs_classtype, self,
    swigf_lhs_classtype, const_cast<SwigfClassWrapper*>(other),
    0 | swigf::IS_COPY_CONSTR);
}


SWIGEXPORT SwigfClassWrapper swigc_new_ParameterList__SWIG_0() {
  SwigfClassWrapper fresult ;
  Teuchos::ParameterList *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ParameterList *)new Teuchos::ParameterList();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return SwigfClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return SwigfClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return SwigfClassWrapper_uninitialized());
    }
  }
  fresult.ptr = result ? new Teuchos::RCP< Teuchos::ParameterList >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.mem = SWIGF_MOVE;
  return fresult;
}


SWIGEXPORT SwigfClassWrapper swigc_new_ParameterList__SWIG_1(SwigfArrayWrapper *farg1) {
  SwigfClassWrapper fresult ;
  std::string *arg1 = 0 ;
  std::string tempstr1 ;
  Teuchos::ParameterList *result = 0 ;
  
  tempstr1 = std::string(static_cast<const char*>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ParameterList *)new Teuchos::ParameterList((std::string const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return SwigfClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return SwigfClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return SwigfClassWrapper_uninitialized());
    }
  }
  fresult.ptr = result ? new Teuchos::RCP< Teuchos::ParameterList >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.mem = SWIGF_MOVE;
  return fresult;
}


SWIGEXPORT void swigc_ParameterList_print(SwigfClassWrapper const *farg1) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList const > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? const_cast<Teuchos::ParameterList*>(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Teuchos::ParameterList const *)arg1)->print();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_remove(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->remove((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT int swigc_ParameterList_is_parameter(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  int fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList const > *smartarg1 ;
  std::string tempstr2 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? const_cast<Teuchos::ParameterList*>(smartarg1->get()) : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::ParameterList const *)arg1)->isParameter((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT SwigfClassWrapper swigc_ParameterList_sublist(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  SwigfClassWrapper fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::ParameterList *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ParameterList *) &(arg1)->sublist((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return SwigfClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return SwigfClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return SwigfClassWrapper_uninitialized());
    }
  }
  {
    fresult.ptr = new Teuchos::RCP< Teuchos::ParameterList >(result SWIG_NO_NULL_DELETER_0);
    fresult.mem = SWIGF_MOVE;
  }
  return fresult;
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_1(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2, double const *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  double *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  arg3 = reinterpret_cast< double * >(const_cast< double* >(farg3));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< double >((std::string const &)*arg2,(double const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_2(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2, int const *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  int *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  arg3 = reinterpret_cast< int * >(const_cast< int* >(farg3));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< int >((std::string const &)*arg2,(int const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_3(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2, long long const *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  long long *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  arg3 = reinterpret_cast< long long * >(const_cast< long long* >(farg3));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< long long >((std::string const &)*arg2,(long long const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_4(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2, int const *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  bool tempbool3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    tempbool3 = (*farg3 ? true : false);
    arg3 = &tempbool3;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< bool >((std::string const &)*arg2,(bool const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_5(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2, SwigfArrayWrapper *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  std::string tempstr3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  tempstr3 = std::string(static_cast<const char*>(farg3->data), farg3->size);
  arg3 = &tempstr3;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< std::string >((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_6(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2, SwigfArrayWrapper *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::Array< double > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::Array< double > temparr3 ;
  Teuchos::Array< double >::value_type *tempbegin3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  tempbegin3 = static_cast<Teuchos::Array<double>::value_type*>(farg3->data);
  temparr3.assign(tempbegin3, tempbegin3 + farg3->size);
  arg3 = &temparr3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< Teuchos::Array< double > >((std::string const &)*arg2,(Teuchos::Array< double > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_7(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2, SwigfArrayWrapper *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::Array< int > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::Array< int > temparr3 ;
  Teuchos::Array< int >::value_type *tempbegin3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  tempbegin3 = static_cast<Teuchos::Array<int>::value_type*>(farg3->data);
  temparr3.assign(tempbegin3, tempbegin3 + farg3->size);
  arg3 = &temparr3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< Teuchos::Array< int > >((std::string const &)*arg2,(Teuchos::Array< int > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_8(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2, SwigfClassWrapper const *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::ParameterList *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::RCP< Teuchos::ParameterList const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  SWIGF_check_sp_nonnull(farg3,
    "Teuchos::ParameterList *", "ParameterList", "Teuchos::ParameterList::set< Teuchos::ParameterList >(std::string const &,Teuchos::ParameterList const &)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Teuchos::ParameterList >* >(farg3->ptr);
  arg3 = const_cast<Teuchos::ParameterList*>(smartarg3->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->SWIGTEMPLATEDISAMBIGUATOR set< Teuchos::ParameterList >((std::string const &)*arg2,(Teuchos::ParameterList const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT double swigc_ParameterList_get_real(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  double fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  double *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (double *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< double >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT int swigc_ParameterList_get_integer(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  int fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  int *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< int >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT long long swigc_ParameterList_get_longlong(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  long long fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  long long *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (long long *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< long long >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT int swigc_ParameterList_get_logical(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  int fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  bool *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< bool >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT SwigfArrayWrapper swigc_ParameterList_get_string(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  SwigfArrayWrapper fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  std::string *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (std::string *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< std::string >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return SwigfArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return SwigfArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return SwigfArrayWrapper_uninitialized());
    }
  }
  fresult.data = (result->empty() ? NULL : &(*result->begin()));
  fresult.size = result->size();
  
  return fresult;
}


SWIGEXPORT SwigfArrayWrapper swigc_ParameterList_get_arr_real(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  SwigfArrayWrapper fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::Array< double > *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< double > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< Teuchos::Array< double > >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return SwigfArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return SwigfArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return SwigfArrayWrapper_uninitialized());
    }
  }
  fresult.data = (result->empty() ? NULL : &(*result->begin()));
  fresult.size = result->size();
  
  return fresult;
}


SWIGEXPORT SwigfArrayWrapper swigc_ParameterList_get_arr_integer(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  SwigfArrayWrapper fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::Array< int > *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< int > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< Teuchos::Array< int > >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return SwigfArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return SwigfArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return SwigfArrayWrapper_uninitialized());
    }
  }
  fresult.data = (result->empty() ? NULL : &(*result->begin()));
  fresult.size = result->size();
  
  return fresult;
}


SWIGEXPORT SwigfArrayWrapper swigc_ParameterList_get_arr_longlong(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  SwigfArrayWrapper fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  Teuchos::Array< long long > *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< long long > *) &(arg1)->SWIGTEMPLATEDISAMBIGUATOR get< Teuchos::Array< long long > >((std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return SwigfArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return SwigfArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return SwigfArrayWrapper_uninitialized());
    }
  }
  fresult.data = (result->empty() ? NULL : &(*result->begin()));
  fresult.size = result->size();
  
  return fresult;
}


SWIGEXPORT void swigc_delete_ParameterList(SwigfClassWrapper const *farg1) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = smartarg1 ? smartarg1->get() : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_assignment_ParameterList(SwigfClassWrapper * self, SwigfClassWrapper const * other) {
  typedef Teuchos::RCP< Teuchos::ParameterList > swigf_lhs_classtype;
  SWIGF_assign(swigf_lhs_classtype, self,
    swigf_lhs_classtype, const_cast<SwigfClassWrapper*>(other),
    0 | swigf::IS_COPY_CONSTR);
}


SWIGEXPORT void swigc_load_from_xml(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  Teuchos::RCP< Teuchos::ParameterList > *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull1 ;
  std::string tempstr2 ;
  
  arg1 = farg1->ptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg1->ptr) : &tempnull1;
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      load_from_xml((Teuchos::RCP< Teuchos::ParameterList > const &)*arg1,(std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


SWIGEXPORT void swigc_save_to_xml(SwigfClassWrapper const *farg1, SwigfArrayWrapper *farg2) {
  Teuchos::ParameterList *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList const > *smartarg1 ;
  std::string tempstr2 ;
  
  SWIGF_check_sp_nonnull(farg1,
    "Teuchos::ParameterList *", "ParameterList", "save_to_xml(Teuchos::ParameterList const &,std::string const &)", return )
  smartarg1 = static_cast< Teuchos::RCP<const Teuchos::ParameterList >* >(farg1->ptr);
  arg1 = const_cast<Teuchos::ParameterList*>(smartarg1->get());
  tempstr2 = std::string(static_cast<const char*>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swigf_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      save_to_xml((Teuchos::ParameterList const &)*arg1,(std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  
}


#ifdef __cplusplus
}
#endif

